#+TITLE: ErrantProgrammer Emacs config
#+AUTOR: errantProgrammer
#+DESCRIPTION: errantProgrammer's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#package-manager][PACKAGE MANAGER]]
- [[#agregar-directorio-de-script][Agregar directorio de script]]
- [[#app-launchers][APP LAUNCHERS]]
- [[#all-the-icons-and-nerd-icons][All the icons and Nerd icons]]
- [[#nerd-icons][NERD ICONS]]
- [[#company][COMPANY]]
- [[#dashboard][DASHBOARD]]
- [[#diminish][DIMINISH]]
- [[#evil-emacs][EVIL EMACS]]
- [[#flycheck][Flycheck]]
- [[#fonts][FONTS]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#edicion][Edicion]]
- [[#general-keybindings][General Keybindings]]
- [[#which--key][Which- Key]]
- [[#ivy][IVY]]
- [[#neotree][NEOTREE]]
- [[#projectile][Projectile]]
  - [[#configuracion-de-projectile-para-almacenar-los-projectos][Configuracion de Projectile para almacenar los projectos]]
  - [[#configuracion-de-paquetes-de-projectile][Configuracion de paquetes de projectile]]
- [[#configuracion-general][Configuracion General]]
  - [[#backup-files][Backup files]]
- [[#theme][THEME]]
  - [[#modeline][MODELINE]]
  - [[#configuracion-extra][CONFIGURACION EXTRA]]
  - [[#transpariencia][Transpariencia]]

* PACKAGE MANAGER

Los paquetes que se voy a estar utilizando son:
- melpa
- org
- elpa

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org". "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
  (package-refresh-contents))

  ;;Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
  (package-install 'use-package))
  ;; Configuracion para el auto update de los paquetes
  (require 'use-package)
  (setq use-package-always-ensure t)
  (use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

* Agregar directorio de script
#+begin_src emacs-lisp
(let ((scripts-dir (expand-file-name "scripts" user-emacs-directory)))
  (add-to-list 'load-path scripts-dir)
  (load(expand-file-name "load-init" scripts-dir))
  ;; (load(expand-file-name "latex" scripts-dir));; funciones para la configuracion de latex
)
#+end_src

* APP LAUNCHERS

#+begin_src emacs-lisp
(defun emacs-run-launcher ()
  "Create and select a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Runs app-launcher-run-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
  (interactive)
  (with-selected-frame 
    (make-frame '((name . "emacs-run-launcher")
                  (minibuffer . only)
                  (fullscreen . t) ; fullscreen
                  (undecorated . t) ; remove title bar
                  ;;(auto-raise . t) ; focus on this frame
                  ;;(tool-bar-lines . 0)
                  ;;(menu-bar-lines . 0)
                  (internal-border-width . 10)
                  (width . 80)
                  (height . 11)))
                  (unwind-protect
                    (app-launcher-run-app)
                    (delete-frame))))
#+end_src

* All the icons and Nerd icons

Paquetes para iconos en el entorno de emacs. Para tener en consideración, es posible que se tenga que ralizar
una instalación manueal de ciertas tipografias por que WINDOWS no lo detecta.

*** ALL THE ICONS

#+begin_src emacs-lisp
  (use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda() (all-the-icons-dired-mode t))))
#+end_src

* NERD ICONS

#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t)
#+end_src

* COMPANY

Permite completar codigo en todos los lenguas de programcion.

#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-number t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))
  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src
* DASHBOARD

Dashboard es una configuracion de emacs que me permite tener una ventana de carga al iniciar emacs
lo cual es muy interesante la verdad.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-log-title "errantProgrammer")
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-display-icon-p t)
  (setq dashboard-items '((recents . 5)
			  (bookmarks . 5)
			  (projects . 5)
			  (registers . 5)))
  (setq dashboard-item-shortcuts '((recents   . "r")
				   (bookmarks . "m")
				   (projects  . "p")
				   (agenda    . "a")
				   (registers . "e")))
  (setq dashboard-center-content nil)
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
				    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook)
  )
#+end_src

* DIMINISH

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* EVIL EMACS

#+begin_src emacs-lisp
  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
      :init      ;; tweak evil's configuration before loading it
      (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
	    evil-want-keybinding nil
	    evil-vsplit-window-right t
	    evil-split-window-below t
	    evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
      (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    ;; Do not uncomment this unless you want to specify each and every mode
    ;; that evil-collection should works with.  The following line is here 
    ;; for documentation purposes in case you need it.  
    ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
    (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
    (evil-collection-init))
  (use-package evil-tutor)

  ;; Using RETURN to follow links in Org/Evil 
  ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  ;; Setting RETURN key in org-mode to follow links
    (setq org-return-follows-link  t)
#+end_src

* Flycheck

Lo copie de la distro de dt, pero me parece que es para maner los errores.

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))
#+end_src

* FONTS

Fuentes tipografia a usar van a ser las de Nerd font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		    :font "Hurmit Nerd Font"
		    :height 110
		    :weight 'medium)
   (set-face-attribute 'variable-pitch nil
		  :font "Hurmit Nerd Font"
		  :height 120
		  :weight 'medium)
   (set-face-attribute 'fixed-pitch nil
		  :font "Hurmit Nerd Font"
		  :height 110
		  :weight 'medium)
  (set-face-attribute 'font-lock-comment-face nil
		      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
		      :slant 'italic)
  (setq-default line-spacing 0.12)
#+end_src

* LANGUAGE SUPPORT

Emacs provee soporte a mucho lenguaje de programacion, pero para algunos mas recientes, es
necesario instalarlo dependiendo lo que necesitemos
** Edicion
Lenguajes de edicion, en emacs se puede tener multiples archivos de edicion como:
- org-mode
- latex
- markdown
  
*** ORG MODE

#+begin_src emacs-lisp
;; Usar UTF-8 de forma predeterminada
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq buffer-file-coding-system 'utf-8)
#+end_src
**** TOC

Habilitar el table of contents
#+begin_src emacs-lisp
  (use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
**** Org bullets

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook' 'org-ident-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
#+end_src

**** Desabilitar electrict indet

#+begin_src emacs-lisp
(electric-indent-mode 1)
(setq org-edit-src-content-indentation 0)
#+end_src

*** Diminish Org Indent Mode
#+begin_src emacs-lisp
(eval-after-load 'org-indent '(diminish 'org-indent-mode))
#+end_src

*** Code block
Este nos va a permitir realizar cuandros de bloque de forma más rapida, lo que es muy interesante
ya que solo se va a tener que utilizar comandos para los bloques.

De igual forma en caso nos olvidemos de alguno de estos, podemos utilizar el siguiente comando:
#+begin_example
ctrl + c  ctrl + ,
#+end_example

| Typing the below + TAB | Expands to..                              | Descripcion                                                    |
|------------------------+-------------------------------------------+----------------------------------------------------------------|
| <a                     | `#+BEGIN_EXPORT ascii` ... `#+END_EXPORT` | Bloque de ASCII, para contenido específico de ASCII            |
| <c                     | `#+BEGIN_CENTER`...`#+END_CENTER`         | Bloque de *center*, para centrar el texto                      |
| <C                     | `#+BEGIN_COMMENT`...`#+END_COMMENT`       | Bloque de *comentario*, todo en su interior va a ser comentado |
| <e                     | `#+BEGIN_EXAMPLE`...`#+END_EXAMPLE`       | Bloque de *ejemplo*, para texto preformateado.                 |
| <E                     | `#+BEGIN_EXPORT`...`#+END_EXPORT`         |                                                                |
| <h                     | `#+BEGIN_EXPORT html`...`#+END_EXPORT`    | Bloque de HTML, para incluir contenido HTML.                   |
| <i                     | `#+BEGIN_INDEX`                           | Bloque de índice, para insertar un índice.                     |
| <l                     | `#+BEGIN_EXPORT latex`...`#+END_EXPORT`   | Bloque de LaTeX, para incluir comandos LaTeX.                  |
| <q                     | `#+BEGIN_QUOTE`...`#+END_QUOTE`           | Bloque de cita (quote), para citas largas.                     |
| <s                     | `#+BEGIN_SRC`...`#+END_SRC`               | Bloque de código fuente (block de código).                     |
| <v                     | `#+BEGIN_VERSE`...`#+END_VERSE`           | Bloque de verso, útil para poesía o texto en líneas.           |

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

*** LATEX

Latex es un lenguaje que nos permite realizar documentos de una manera mas elegante.
La siguiente configuracion esta basada en Karthink.

#+begin_src 
;; AucTeX settings - almost no changes
(use-package latex
  :ensure auctex
  :hook ((LaTeX-mode . prettify-symbols-mode))
  :bind (:map LaTeX-mode-map
         ("C-S-e" . latex-math-from-calc))
  :config
  ;; Format math as a Latex string with Calc
  (defun latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (cond ((region-active-p)
           (let* ((beg (region-beginning))
                  (end (region-end))
                  (string (buffer-substring-no-properties beg end)))
             (kill-region beg end)
             (insert (calc-eval `(,string calc-language latex
                                          calc-prefer-frac t
                                          calc-angle-mode rad)))))
          (t (let ((l (thing-at-point 'line)))
               (end-of-line 1) (kill-line 0) 
               (insert (calc-eval `(,l
                                    calc-language latex
                                    calc-prefer-frac t
                                    calc-angle-mode rad))))))))

(use-package preview
  :after latex
  :hook ((LaTeX-mode . preview-larger-previews))
  :config
  (defun preview-larger-previews ()
    (setq preview-scale-function
          (lambda () (* 1.25
                   (funcall (preview-scale-from-face)))))))

;; CDLatex settings
(use-package cdlatex
  :ensure t
  :hook (LaTeX-mode . turn-on-cdlatex)
  :bind (:map cdlatex-mode-map 
              ("<tab>" . cdlatex-tab)))

;; Yasnippet settings
(use-package yasnippet
  :ensure t
  :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets))
  :config
  (use-package warnings
    :config
    (cl-pushnew '(yasnippet backquote-change)
                warning-suppress-types
                :test 'equal))

  (setq yas-triggers-in-field t)
  
  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand)))))

;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
;; fields
(use-package cdlatex
  :hook ((cdlatex-tab . yas-expand)
         (cdlatex-tab . cdlatex-in-yas-field))
  :config
  (use-package yasnippet
    :bind (:map yas-keymap
           ("<tab>" . yas-next-field-or-cdlatex)
           ("TAB" . yas-next-field-or-cdlatex))
    :config
    (defun cdlatex-in-yas-field ()
      ;; Check if we're at the end of the Yas field
      (when-let* ((_ (overlayp yas--active-field-overlay))
                  (end (overlay-end yas--active-field-overlay)))
        (if (>= (point) end)
            ;; Call yas-next-field if cdlatex can't expand here
            (let ((s (thing-at-point 'sexp)))
              (unless (and s (assoc (substring-no-properties s)
                                    cdlatex-command-alist-comb))
                (yas-next-field-or-maybe-expand)
                t))
          ;; otherwise expand and jump to the correct location
          (let (cdlatex-tab-hook minp)
            (setq minp
                  (min (save-excursion (cdlatex-tab)
                                       (point))
                       (overlay-end yas--active-field-overlay)))
            (goto-char minp) t))))

    (defun yas-next-field-or-cdlatex nil
      (interactive)
      "Jump to the next Yas field correctly with cdlatex active."
      (if
          (or (bound-and-true-p cdlatex-mode)
              (bound-and-true-p org-cdlatex-mode))
          (cdlatex-tab)
        (yas-next-field-or-maybe-expand)))))

;; Array/tabular input with org-tables and cdlatex 
(use-package org-table
  :after cdlatex
  :bind (:map orgtbl-mode-map
              ("<tab>" . lazytab-org-table-next-field-maybe)
              ("TAB" . lazytab-org-table-next-field-maybe))
  :init
  (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)
  ;; Tabular environments using cdlatex
  (add-to-list 'cdlatex-command-alist '("smat" "Insert smallmatrix env"
                                       "\\left( \\begin{smallmatrix} ? \\end{smallmatrix} \\right)"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("bmat" "Insert bmatrix env"
                                       "\\begin{bmatrix} ? \\end{bmatrix}"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("pmat" "Insert pmatrix env"
                                       "\\begin{pmatrix} ? \\end{pmatrix}"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("tbl" "Insert table"
                                        "\\begin{table}\n\\centering ? \\caption{}\n\\end{table}\n"
                                       lazytab-position-cursor-and-edit
                                       nil t nil))
  :config
  ;; Tab handling in org tables
  (defun lazytab-position-cursor-and-edit ()
    ;; (if (search-backward "\?" (- (point) 100) t)
    ;;     (delete-char 1))
    (cdlatex-position-cursor)
    (lazytab-orgtbl-edit))

  (defun lazytab-orgtbl-edit ()
    (advice-add 'orgtbl-ctrl-c-ctrl-c :after #'lazytab-orgtbl-replace)
    (orgtbl-mode 1)
    (open-line 1)
    (insert "\n|"))

  (defun lazytab-orgtbl-replace (_)
    (interactive "P")
    (unless (org-at-table-p) (user-error "Not at a table"))
    (let* ((table (org-table-to-lisp))
           params
           (replacement-table
            (if (texmathp)
                (lazytab-orgtbl-to-amsmath table params)
              (orgtbl-to-latex table params))))
      (kill-region (org-table-begin) (org-table-end))
      (open-line 1)
      (push-mark)
      (insert replacement-table)
      (align-regexp (region-beginning) (region-end) "\\([:space:]*\\)& ")
      (orgtbl-mode -1)
      (advice-remove 'orgtbl-ctrl-c-ctrl-c #'lazytab-orgtbl-replace)))
  
  (defun lazytab-orgtbl-to-amsmath (table params)
    (orgtbl-to-generic
     table
     (org-combine-plists
      '(:splice t
                :lstart ""
                :lend " \\\\"
                :sep " & "
                :hline nil
                :llend "")
      params)))

  (defun lazytab-cdlatex-or-orgtbl-next-field ()
    (when (and (bound-and-true-p orgtbl-mode)
               (org-table-p)
               (looking-at "[[:space:]]*\\(?:|\\|$\\)")
               (let ((s (thing-at-point 'sexp)))
                 (not (and s (assoc s cdlatex-command-alist-comb)))))
      (call-interactively #'org-table-next-field)
      t))

  (defun lazytab-org-table-next-field-maybe ()
    (interactive)
    (if (bound-and-true-p cdlatex-mode)
        (cdlatex-tab)
      (org-table-next-field))))
#+end_src

* General Keybindings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer errant/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "C-SPC") ;; access leader in insert mode

  (errant/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "TAB TAB" '(comment-line :wk "Comment lines")
    ";" '(comment-region :wk "Comment or uncomment region")
    "u" '(universal-argument :wk "Universal argument")
    "a p" '(load-theme :wk "Toogle theme"))
  ;; find direct or file
  (errant/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))
  ;; shell
  (errant/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "m" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t v" '(vterm-toggle :wk "Toggle vterm"))
  ;;  Projectile
  (errant/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))
  ;; Buffer
  (errant/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file")) 
  ;; Lenguajes de edicion de texto
  ;; Org-mode
  (errant/leader-keys
    "o m" '(toc-org-mode :wk "Toggle org mode")
    "o t" '(toc-org-insert-toc :wk "Insert TOC")
    "o l" '(org-goto :wk "Search Heading Jump"))
  )
#+end_src

* Which- Key

Paquete para mostrarnos que es lo que esta utilizando las combinaciones de tecla

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

* IVY

Ivy es un autocompletado, para cuando estabamos utilizando el minibuffer( `M-x`).
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config 
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

* NEOTREE

#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
	neo-show-hidden-files t
	neo-window-width 55
	neo-window-fixed-size nil
	inhibit-compacting-font-caches t
	dashboard-projects-backend 'projectile
	projectile-switch-project-action 'neotree-projectile-action) 
  ;; truncate long file names in neotree
  (add-hook 'neo-after-create-hook
	    #'(lambda (_)
		(with-current-buffer (get-buffer neo-buffer-name)
		  (setq truncate-lines t)
		  (setq word-wrap nil)
		  (make-local-variable 'auto-hscroll-mode)
		  (setq auto-hscroll-mode nil))))
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

# * Perspective
# Este paquete va a quedar en suspenso hasta nuevo aviso
# Permite trabar con multiples workspaces

# #+begin_src emacs-lisp
#   (use-package perspective
#     :custom
#     (persp-mode-prefix-key (kbd "C-c M-p"))
#     :init
#     (persp-mode))
#   ;; :config
#   ;; (setq persp-state-default-file "~/.config/emacs/sessions"))
#   (add-hook 'ibuffer-hook
# 	    (lambda ()
# 	      (persp-ibuffer-set-filter-groups)
# 	      (unless (eq ibuffer-sorting-mode 'alphabetic)
# 		(ibuffer-do-sort-by-alphabetic))))
#   (add-hook 'kill-emacs-hook #'persp-state-save)
# #+end_src

* Projectile

Projectile es un plugin que nos va a permitir editar de forma mas organica nuestros projectos, para este caso vamos a plinear los que mas vamos a estar utilizando.

Los projectos se cargan dinamicamente desde mi `~/.emacs.d/projects.el` y este archivo no se incluye en el control de versiones para mantener diferentes configuraciones por computadora.


#+begin_src emacs-lisp
;; Instalacion de projectile en caso no exista
;; (unless (package-installed-p 'projectile)
;;   (package-install 'projectile))
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
	      ("s-p" . projectile-command-map)	   ; para mac-users
	      ("C-c p" . projectile-command-map)) ; para windows o linux users
  :config
  (let ((projects-file (expand-file-name "projects.el" user-emacs-directory)))
    (when (file-exists-p projects-file)
      (load-file projects-file)))
  )
#+end_src

** Configuracion de Projectile para almacenar los projectos

Para almacenar los projectos vamos a crear un archivo `projects.el`, este va a contener
la carpeta donde se encuentra mis projectos. De la siguiente manera:

Los puntos significan si se quiere buscar a 1 nivel de profundidad o a 2 niveles de profundidad
#+begin_src 
(setq projectile-project-search-path '("~/projects/" "~/work/" ("~/github" . 1)))
#+end_src

** Configuracion de paquetes de projectile

#+begin_src 
(define-key projectile-mode-map (kbd "SPC") 'projectile-command-map)
(define-key projectile-mode-map [?\s-d] 'projectile-find-dir)
(define-key projectile-mode-map [?\s-p] 'projectile-switch-project)
(define-key projectile-mode-map [?\s-f] 'projectile-find-file)
(define-key projectile-mode-map [?\s-g] 'projectile-grep)
#+end_src

* Configuracion General

#+begin_src emacs-lisp
;; Set up the visible bell
(setq visible-bell t)
;; Archivo de configuracion general
;; Mueve todos mis archivos de trabajo a un solo lugar, para mantener limpio mi entorno de trabajo.
(use-package no-littering)
(setq auto-save-file-name-transforms
      `((".*",(no-littering-expand-var-file-name "auto-save/") t)))
;; Configuracion de la apariencia de emacs
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(windmove-default-keybindings);; habilita con shift para moverme entre ventanas4f
;; el hecho de movernos entre ventans es con shift + flecha
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Backup files

#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/save")))
#+end_src

# * Shelsl and terminals

# ** Eshell

# #+begin_src emacs-lisp
# (use-package eshell-toggle
#   :custom
#   (eshell-toggle-size-fraction 3)
#   (eshell-toggle-use-projectile-root t)
#   (eshell-toggle-run-command nil)
#   (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

#   (use-package eshell-syntax-highlighting
#     :after esh-mode
#     :config
#     (eshell-syntax-highlighting-global-mode +1))

#   ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
#   ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
#   ;; eshell-aliases-file -- sets an aliases file for the eshell.

#   ;; (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
#   ;;       eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
#   ;;       eshell-history-size 5000
#   ;;       eshell-buffer-maximum-lines 5000
#   ;;       eshell-hist-ignoredups t
#   ;;       eshell-scroll-to-bottom-on-input t
#   ;;       eshell-destroy-buffer-when-process-dies t
#   ;;       eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
# #+end_src

# ** Vterm

# #+begin_src emacs-lisp
# (use-package vterm
# :config
# (setq shell-file-name "/bin/sh"
#       vterm-max-scrollback 5000))
# #+end_src

* THEME
Los temas van a venir del paquete doom-theme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-tokyo-night)
  )
#+end_src

** MODELINE

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35
	  doom-modeline-bar-width 5
	  doom-modeline-persp-name t
	  doom-modeline-persp-icon t))
    ;; (setq doom-mode-icon t)
    ;; (setq doom-modeline-buffer-state-icon t)
    ;; (setq doom-modeline-lsp-icon t)
    ;; (setq doom-modeline-workspace-name t)
    ;; (setq doom-modeline-project-detection 'auto)
    ;; )

#+end_src

** CONFIGURACION EXTRA

La siguiente configuracion todavia esta en proceso de ver porque mrd no funciona los
icons

#+begin_src emacs-lisp
  ;; Don’t compact font caches during GC.
  (setq inhibit-compacting-font-caches t)
  (setq find-file-visit-truename t)

  ;;  algunas variables
  (setq inhibit-startup-message t
	recentf-max-saved-items 50);; t is true
  ;; numero de lineas
  (global-display-line-numbers-mode +1)
  (setq display-line-numbers-type 'relative)

  ;; Mostrar número de columna
  (column-number-mode 1)

  ;; Márgenes laterales
  (fringe-mode '(8 . 8))
#+end_src

** Transpariencia

#+begin_src emacs-lisp
  ;; Transpariencia
  (set-frame-parameter (selected-frame) 'alpha '(95 . 95)) ;; Ajusta los valores para la transparencia
  (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+end_src

